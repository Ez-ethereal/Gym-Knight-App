// middleware to authorize a request to the protected route (likely private user profile details)

const { verify } = require('jsonwebtoken')

const isAuth = req => { // takes a request 
    const authorization = req.headers['authorization'] // extract the authorization header from the request, which should contain the access token
    if (!authorization) { // prevent access to protected resources if there is no authorization
        throw new Error('You need to log in')
    }
    const token = authorization.split(' ')[1] // extract the token from the header - the header should be of the form 'Bearer <token>'
    const { userId } = verify(token, process.env.ACCESS_TOKEN_SECRET) // verify the token using the secret key - ensures that the token was generated by this server and is valid
    return userId // verification decodes the payload of the token, which we defined to be just the userId
}

module.exports = {
    isAuth
}